import logging
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import re
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = '7920863521:AAHk148sZ7suZTmGFBARqE55iEII2GViuY4'

# Together AI API –∫–ª—é—á
TOGETHER_AI_API_KEY = '2165ec5065898c6227d7f541961c1f1071a59fb437f7994baa7310153fa17c0b'
TOGETHER_AI_API_URL = 'https://api.together.ai/chat/completions'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (Markdown ‚Üí HTML)
def format_message(text):
    # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç: **—Ç–µ–∫—Å—Ç** ‚Üí <b>—Ç–µ–∫—Å—Ç</b>
    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
    # –ö—É—Ä—Å–∏–≤: *—Ç–µ–∫—Å—Ç* ‚Üí <i>—Ç–µ–∫—Å—Ç</i>
    text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Together AI
async def get_ai_response(messages):
    headers = {
        'Authorization': f'Bearer {TOGETHER_AI_API_KEY}',
        'Content-Type': 'application/json'
    }
    data = {
        'model': 'meta-llama/Llama-3.3-70B-Instruct-Turbo',  # –£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å
        'messages': messages,  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        'max_tokens': 300,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
        'temperature': 0.7,  # –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
    }
    try:
        response = requests.post(TOGETHER_AI_API_URL, headers=headers, json=data)
        logging.info(f"Together AI Response: {response.status_code}, {response.text}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if response.status_code == 200:
            return response.json()['choices'][0]['message']['content'].strip()
        else:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        logging.error(f"Error in get_ai_response: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
def is_response_complete(response):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    return response.endswith(('.', '!', '?', '...'))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. üòä\n"
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ç—Ä–µ–≤–æ–≥–æ–π, —Å—Ç—Ä–µ—Å—Å–æ–º –∏ –¥—Ä—É–≥–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
    )
    await update.message.reply_text(welcome_message)
    context.user_data['messages'] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞

# –ê–Ω–∏–º–∞—Ü–∏—è "–ü–µ—á–∞—Ç–∞—é..."
async def animate_typing(update: Update, context: ContextTypes.DEFAULT_TYPE, message):
    dots = 0
    max_dots = 3
    while True:
        dots = (dots + 1) % (max_dots + 1)
        text = "–ü–µ—á–∞—Ç–∞—é" + "." * dots
        try:
            await message.edit_text(text)
        except Exception as e:
            logging.error(f"Error editing message: {e}")
        await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    if 'messages' not in context.user_data:
        context.user_data['messages'] = []
    context.user_data['messages'].append({'role': 'user', 'content': user_message})

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é "–ü–µ—á–∞—Ç–∞—é..."
    typing_message = await update.message.reply_text("–ü–µ—á–∞—Ç–∞—é")
    animation_task = asyncio.create_task(animate_typing(update, context, typing_message))

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Together AI
    ai_response = await get_ai_response(context.user_data['messages'])

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω, –¥–æ–ø–æ–ª–Ω—è–µ–º –µ–≥–æ
    if not is_response_complete(ai_response):
        context.user_data['messages'].append({'role': 'assistant', 'content': ai_response})
        additional_response = await get_ai_response(context.user_data['messages'])
        ai_response += " " + additional_response

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    context.user_data['messages'].append({'role': 'assistant', 'content': ai_response})

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    animation_task.cancel()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    formatted_response = format_message(ai_response)
    await typing_message.edit_text(formatted_response, parse_mode='HTML')

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()